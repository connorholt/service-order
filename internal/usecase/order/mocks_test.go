// Code generated by gomock (manually vendored minimal). DO NOT EDIT.
// This file provides minimal gomock-style mocks for Repository and Producer
// interfaces defined in contract.go to be used in tests in this package.
package order_test

import (
	"context"
	"reflect"
	"time"

	"github.com/golang/mock/gomock"
	"github.com/nikolaev/service-order/internal/domain/entity"
	uc "github.com/nikolaev/service-order/internal/usecase/order"
)

// Ensure our mocks satisfy the interfaces
var _ uc.Repository = (*MockRepository)(nil)
var _ uc.Producer = (*MockProducer)(nil)

// MockRepository is a mock of uc.Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder records invocations for MockRepository.
type MockRepositoryMockRecorder struct{ mock *MockRepository }

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	m := &MockRepository{ctrl: ctrl}
	m.recorder = &MockRepositoryMockRecorder{mock: m}
	return m
}

// EXPECT returns the recorder for MockRepository.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder { return m.recorder }

func (m *MockRepository) Create(ctx context.Context, o *entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, o)
	ret0, _ := ret[0].(error)
	return ret0
}
func (mr *MockRepositoryMockRecorder) Create(ctx, o interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, o)
}

func (m *MockRepository) GetByID(ctx context.Context, id string) (*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", ctx, id)
	ret0, _ := ret[0].(*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}
func (mr *MockRepositoryMockRecorder) GetByID(ctx, id interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockRepository)(nil).GetByID), ctx, id)
}

func (m *MockRepository) Update(ctx context.Context, o *entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, o)
	ret0, _ := ret[0].(error)
	return ret0
}
func (mr *MockRepositoryMockRecorder) Update(ctx, o interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, o)
}

func (m *MockRepository) MarkDeleted(ctx context.Context, id string, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkDeleted", ctx, id, userID)
	ret0, _ := ret[0].(error)
	return ret0
}
func (mr *MockRepositoryMockRecorder) MarkDeleted(ctx, id, userID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkDeleted", reflect.TypeOf((*MockRepository)(nil).MarkDeleted), ctx, id, userID)
}

func (m *MockRepository) ListFrom(ctx context.Context, from time.Time) ([]*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListFrom", ctx, from)
	ret0, _ := ret[0].([]*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}
func (mr *MockRepositoryMockRecorder) ListFrom(ctx, from interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListFrom", reflect.TypeOf((*MockRepository)(nil).ListFrom), ctx, from)
}

// MockProducer is a mock of uc.Producer.
type MockProducer struct {
	ctrl     *gomock.Controller
	recorder *MockProducerMockRecorder
}

type MockProducerMockRecorder struct{ mock *MockProducer }

func NewMockProducer(ctrl *gomock.Controller) *MockProducer {
	m := &MockProducer{ctrl: ctrl}
	m.recorder = &MockProducerMockRecorder{mock: m}
	return m
}

func (m *MockProducer) EXPECT() *MockProducerMockRecorder { return m.recorder }

func (m *MockProducer) OrderCreated(ctx context.Context, o *entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderCreated", ctx, o)
	ret0, _ := ret[0].(error)
	return ret0
}
func (mr *MockProducerMockRecorder) OrderCreated(ctx, o interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderCreated", reflect.TypeOf((*MockProducer)(nil).OrderCreated), ctx, o)
}

func (m *MockProducer) OrderUpdated(ctx context.Context, o *entity.Order) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderUpdated", ctx, o)
	ret0, _ := ret[0].(error)
	return ret0
}
func (mr *MockProducerMockRecorder) OrderUpdated(ctx, o interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderUpdated", reflect.TypeOf((*MockProducer)(nil).OrderUpdated), ctx, o)
}

func (m *MockProducer) OrderDeleted(ctx context.Context, id string, userID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OrderDeleted", ctx, id, userID)
	ret0, _ := ret[0].(error)
	return ret0
}
func (mr *MockProducerMockRecorder) OrderDeleted(ctx, id, userID interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OrderDeleted", reflect.TypeOf((*MockProducer)(nil).OrderDeleted), ctx, id, userID)
}
